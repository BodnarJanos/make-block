<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Uh.?jOe$pG*|y=(SFK9j" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="9Mx-qQfSO%%=|2tuW*Ht" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace wjano {" line1=" " line2="    //% block" line3="    //% group=&quot;type of blocks&quot;" line4="    export function show(){" line5="" line6="    }" line7="" line8="    //% block" line9="    //% group=&quot;type of blocks&quot;" line10="    export function move(steps: number){" line11="" line12="    }" line13="" line14="    //% block" line15="    //% groups=&quot;type of blocks&quot;" line16="    export function randomNumber(): number{" line17="        return 0;" line18="    }" line19="" line20="    //% block" line21="    //% group=&quot;type of blocks&quot;" line22="    export function randomBoolean(): boolean{" line23="        return false;" line24="    }" line25="" line26="    //% block=&quot;on event ke&quot;" line27="    //% group=&quot;type of blocks&quot;" line28="    export function onEvent(handler: () =&gt; void) {" line29="        " line30="    }" line31="" line32="" line33="" line34="" line35="    //% block" line36="    //% group=&quot;ordering&quot;" line37="    //% weight = 50" line38="    export function second(){" line39="" line40="    }" line41=" " line42="    //% block" line43="    //% group=&quot;ordering&quot;" line44="    //% wight=100" line45="    export function first() {" line46="" line47="    }" line48="" line49="" line50="" line51="    //% block" line52="    //% group=&quot;plant&quot;" line53="    export function potato() {" line54="" line55="    }" line56="" line57="    //% block" line58="    //% group=&quot;plant&quot;" line59="    export function bean() {" line60="" line61="    }" line62="" line63="    //% block" line64="    //% group=&quot;plant&quot;" line65="    export function apple() {" line66="" line67="    }" line68="" line69="    //% block" line70="    //% group=&quot;plant&quot;" line71="    export function banana() {" line72="" line73="    }" line74="" line75="" line76="    /**" line77="     * Set the color of a namespace (block category) by setting" line78="     * the color attribute annotation on the namespace. Icons" line79="     * are drawn from https://semantic-ui.com/elements/icon.html" line80="     * To find the Unicode representation of an icon, inspect" line81="     * the element using the browser's debugger" line82="     */" line83="" line84="    //% block" line85="    //% group=&quot;hello&quot;" line86="    export function foo() {" line87="    }" line88="" line89="    //% block" line90="    //% group=&quot;hello&quot;" line91="    export function foo1() {" line92="    }" line93="" line94="    //% block" line95="    //% group=&quot;hello&quot;" line96="    export function foo2() {" line97="    }" line98="" line99="" line100="" line101="    /**" line102="     * Use the VARIABLE.defl=VALUE notation to specify" line103="     * default argument values." line104="     */" line105="" line106="    //% block" line107="    //% x.defl=42" line108="    //% group=&quot;test&quot;" line109="    export function foo4(x: number) {" line110="" line111="    }" line112="" line113="    //% block" line114="    //% s.defl=&quot;hi!&quot;" line115="    //% group=&quot;test&quot;" line116="    export function bar(s: string) {" line117="" line118="    }" line119="" line120="    /**" line121="     * For better readability, you should rewrite the function" line122="     * signature in a &quot;natural language&quot; way. You can refer to" line123="     * each variable in any order using the $VARIABLE syntax." line124="     */" line125="" line126="    //% block=&quot;fooooooo&quot;" line127="    //% group = &quot;formatting&quot;" line128="    export function foo5() {" line129="" line130="    }" line131="" line132="    //% block=&quot;bar x = $x text = $text&quot;" line133="    //% group=&quot;formatting&quot;" line134="    export function bar1(x: number, text: string) {" line135="" line136="    }" line137="" line138="    //% block=&quot;shuffled text = $text x = $x&quot;" line139="    //% group=&quot;formatting&quot;" line140="    export function shuffled(x: number, text: string) {" line141="" line142="    }" line143="" line144="" line145="    /**" line146="     * Functions are mapped to blocks using various macros" line147="     * in comments starting with %. The most important macro" line148="     * is &quot;block&quot;, and it specifies that a block should be" line149="     * generated for an **exported** function." line150="     */" line151="    " line152="    //% block" line153="    //% group=&quot;hello&quot;" line154="    export function helloWorld() {" line155="" line156="    }" line157="" line158="    // note that Caml casing yields lower case" line159="    // block text with spaces" line160="" line161="    //% block" line162="    //% group=&quot;hello&quot;" line163="    export function camlCaseTwo() {" line164="" line165="    }" line166="}" numlines="167"></mutation></block></statement></block></xml>